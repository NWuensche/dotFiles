#!/bin/bash
set -e

ANGLE=45 # in degrees counterclockwise from horizontal
GREY=0.75 # 0 is black 1 is white
FONTSIZE=72 # For 15 characters, `72` is ideal

INPUTFILE=$1
TEXT=$2
OUTPUTFILE=$3

if [[ "$#" != 3 ]]; then #Number of arguments
  echo "Usage: $0 IN.pdf TEXT OUT.pdf"
  exit 1
fi

if [[ ! -f "$INPUTFILE" ]]; then #INPUT File exists
  echo "$INPUTFILE does not exist!"
  exit 1
fi

if [[ -f "$OUTPUTFILE" ]]; then #OUT File does not exist
  echo "$OUTPUTFILE already exists!"
  exit 1
fi

#Generate Watermark PDF (Does not work in variable because of null-bytes)
function getWatermarkPDF() {
ps2pdf - - <<!
%!PS
/cm { 28.4 mul } bind def %define 1 cm = 28.4 points in postscript
<< /PageSize [ 21 cm 29.7 cm] >> setpagedevice
/draft-Bigfont /Helvetica-Bold findfont $FONTSIZE scalefont def
/draft-copy {
        gsave initgraphics $GREY setgray
        5 cm 10 cm moveto
        $ANGLE rotate
        draft-Bigfont setfont
        ($TEXT) show grestore
 } def
draft-copy showpage
!
}

#Same as `PDFNoCopyText` in zshrc alias, but cannot call aliases in script
#$1=INPDF
#$2=OUTPDF
#Already indirectly checked before that $1 is present and $2 is not
function DontAllowCopyTextPDF() {
  gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNoOutputFonts -sOutputFile=$2 $1
}


TMPWATERMARK=$(mktemp)
TMPCOPYPROTECT=$(mktemp)
getWatermarkPDF | pdftk $INPUTFILE background - output $TMPWATERMARK
pdftoppm -jpeg -r 300 -singlefile $TMPWATERMARK $TMPCOPYPROTECT #pdfppm much better quality than convert + Need step through jpeg, because otherwise in PDF censor box is only overlay, which one can take away,
convert $TMPCOPYPROTECT.jpg $OUTPUTFILE #pdftoppm adds own .jpg (even when I add it before


echo "INFO Might not work if pdf is image, then Text behind image not visible"
