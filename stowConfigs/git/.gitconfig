[user]
	email = gh@nwuensche.com
	name = nwuensche
[core]
	editor = vim
	autocrlf = input
[alias]
	graph = log --decorate --graph --oneline
	stageddiff = diff --staged
	noffmerge = merge --no-ff
	rmgitignorefile = "rm --cached "
	sdiff = diff --staged
	ustashls = diff --staged
	ustash = stash --include-untracked
    df = diff ':(exclude)*min.js' ':(exclude)*merge/export/*' ':(exclude)*VERSION*' ':(exclude)*COMMITHASH*'
	sdf = diff --staged ':(exclude)*min.js' ':(exclude)*merge/export/*' ':(exclude)*VERSION*' ':(exclude)*COMMITHASH*'
	deleteCommit = "! f() { git rebase -p --onto \"$1^\" \"$1\" -m --strategy-option=theirs;}; f"
	deleteOldBranches = "! f() { git branch --merged | egrep -v \"(^\\\\*|master|develop)\" | xargs git branch -d; }; f"
	start = !git init && git commit --allow-empty -m \"Initial commit\"
	setup = "!git push --set-upstream origin $((git branch | grep \\* | cut -d "
	setup = "!git push --set-upstream origin $(eval \"git branch | grep \\* | cut -d "
	setup = "!git push --set-upstream origin $(eval \"git branch | grep \\* | cut -d "
  f = "!g() { B=$(git for-each-ref --sort=committerdate refs --format='%(refname:short)' | grep -i $1 | sed 's|^origin/||' | tail -n1); git checkout $B; }; g" #for-each-ref sorts by date, latest one is at the end, refs instead of refs/heads damit ich auch remote-branches bekomme, remove "origin/" from branch to checkout on it
  ff = "!g() { B=$(git for-each-ref --sort=committerdate refs --format='%(refname:short)' | grep -i $1 | tail -n1); git checkout $B --force; }; g" #f + force
  sclone = "!g() { B=$(echo $1 | sed 's|https://github.com/|git@github.com:|') ; git clone $B; }; g"
[pull]
	rebase = true
[merge]
	ff = false
#Slows arch installation [url "git@github.com:"]
#  insteadOf = https://github.com/
[init]
	defaultBranch = main
